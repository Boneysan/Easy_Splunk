#!/usr/bin/env bash
#
# ==============================================================================
# lib/monitoring.sh
# ------------------------------------------------------------------------------
# ⭐⭐⭐
#
# Generates configuration files for the monitoring stack (Prometheus & Grafana).
# This script creates the necessary YAML files that define scrape targets,
# alerting rules, and Grafana's datasources and dashboards.
#
# Features:
#   - Creates a 'prometheus.yml' with scrape configs for key services.
#   - Generates a sample 'alert.rules.yml' with a default 'InstanceDown' alert.
#   - Sets up Grafana provisioning to automatically add the Prometheus
#     datasource and load dashboards.
#
# Dependencies: core.sh
# Required by: orchestrator.sh when monitoring is enabled
#
# ==============================================================================

# --- Source Dependencies ---
# Assumes core.sh has been sourced by the orchestrator.
if [[ -z "$(type -t log_info)" ]]; then
    echo "FATAL: lib/core.sh must be sourced before lib/monitoring.sh" >&2
    exit 1
fi

# --- Configuration ---
# Define standard output locations for the generated config files.
readonly PROMETHEUS_CONFIG_DIR="./config/prometheus"
readonly GRAFANA_PROVISION_DIR="./config/grafana/provisioning"
readonly PROMETHEUS_CONFIG_FILE="${PROMETHEUS_CONFIG_DIR}/prometheus.yml"
readonly PROMETHEUS_RULES_FILE="${PROMETHEUS_CONFIG_DIR}/alert.rules.yml"
readonly GRAFANA_DATASOURCE_FILE="${GRAFANA_PROVISION_DIR}/datasources/datasource.yml"
readonly GRAFANA_DASHBOARD_PROVIDER_FILE="${GRAFANA_PROVISION_DIR}/dashboards/provider.yml"
readonly GRAFANA_DASHBOARDS_JSON_DIR="./config/grafana/dashboards-json"


# --- Private Generator Functions ---

_generate_prometheus_yml() {
    log_debug "Generating Prometheus configuration: ${PROMETHEUS_CONFIG_FILE}"
    cat > "$PROMETHEUS_CONFIG_FILE" << EOF
# Auto-generated by monitoring.sh on $(date)
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "/etc/prometheus/alert.rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'app'
    # This assumes your main application exposes a /metrics endpoint on port 8081
    static_configs:
      - targets: ['app:8081']
EOF
}

_generate_prometheus_rules_yml() {
    log_debug "Generating Prometheus alerting rules: ${PROMETHEUS_RULES_FILE}"
    cat > "$PROMETHEUS_RULES_FILE" << EOF
# Auto-generated by monitoring.sh on $(date)
groups:
  - name: default_alerts
    rules:
      - alert: InstanceDown
        expr: up == 0
        for: 1m
        labels:
          severity: 'critical'
        annotations:
          summary: "Instance {{ \$labels.instance }} down"
          description: "{{ \$labels.instance }} of job {{ \$labels.job }} has been down for more than 1 minute."
EOF
}

_generate_grafana_datasource_yml() {
    log_debug "Generating Grafana datasource config: ${GRAFANA_DATASOURCE_FILE}"
    cat > "$GRAFANA_DATASOURCE_FILE" << EOF
# Auto-generated by monitoring.sh on $(date)
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: false
EOF
}

_generate_grafana_dashboard_provider_yml() {
    log_debug "Generating Grafana dashboard provider: ${GRAFANA_DASHBOARD_PROVIDER_FILE}"
    cat > "$GRAFANA_DASHBOARD_PROVIDER_FILE" << EOF
# Auto-generated by monitoring.sh on $(date)
apiVersion: 1
providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    editable: true
    options:
      path: /etc/grafana/provisioning/dashboards
EOF
}

_create_placeholder_dashboard() {
    local placeholder_file="${GRAFANA_DASHBOARDS_JSON_DIR}/app-overview.json"
    log_debug "Creating placeholder Grafana dashboard: ${placeholder_file}"
    cat > "$placeholder_file" << EOF
{
  "__inputs": [],
  "__requires": [],
  "annotations": { "list": [] },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1618953931321,
  "links": [],
  "panels": [
    {
      "type": "text",
      "title": "My Application Dashboard",
      "gridPos": { "h": 5, "w": 24, "x": 0, "y": 0 },
      "options": {
        "content": "## Welcome\\n\\nThis is a placeholder dashboard. Export your own dashboard JSON and place it in the '${GRAFANA_DASHBOARDS_JSON_DIR}' directory to have it automatically loaded.",
        "mode": "markdown"
      }
    }
  ],
  "refresh": "5s",
  "schemaVersion": 30,
  "style": "dark",
  "tags": [],
  "templating": { "list": [] },
  "time": { "from": "now-6h", "to": "now" },
  "timepicker": {},
  "timezone": "browser",
  "title": "App Overview",
  "uid": "placeholder-dashboard",
  "version": 1
}
EOF
}


# --- Main Public Function ---

# Orchestrates the generation of all monitoring configuration files.
generate_monitoring_config() {
    log_info "📊 Generating monitoring configurations..."

    # Ensure all required directories exist
    mkdir -p "$PROMETHEUS_CONFIG_DIR"
    mkdir -p "${GRAFANA_PROVISION_DIR}/datasources"
    mkdir -p "${GRAFANA_PROVISION_DIR}/dashboards" # This is where the provider file goes
    mkdir -p "$GRAFANA_DASHBOARDS_JSON_DIR" # This is where the actual dashboards go

    # Generate all the files
    _generate_prometheus_yml
    _generate_prometheus_rules_yml
    _generate_grafana_datasource_yml
    _generate_grafana_dashboard_provider_yml
    _create_placeholder_dashboard

    log_warn "A placeholder dashboard has been created. To add your own, save the JSON file in '${GRAFANA_DASHBOARDS_JSON_DIR}' and restart."
    log_success "✅ Monitoring configurations generated successfully."
}