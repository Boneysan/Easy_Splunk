```bash
#!/usr/bin/env bash
# ==============================================================================
# lib/monitoring.sh
# Generate Prometheus & Grafana configs (atomic, compose-aligned).
#
# Dependencies: lib/core.sh (log_*), lib/error-handling.sh (atomic_write),
#               lib/security.sh (write_secret_file, generate_random_password)
# Required by : orchestrator.sh (when monitoring enabled)
# Version: 1.0.0
# ==============================================================================

# ---- Dependency guard ----------------------------------------------------------
if ! command -v log_info >/dev/null 2>&1 || ! command -v atomic_write >/dev/null 2>&1; then
  echo "FATAL: lib/core.sh and lib/error-handling.sh must be sourced before lib/monitoring.sh" >&2
  exit 1
fi
if ! command -v write_secret_file >/dev/null 2>&1; then
  echo "FATAL: lib/security.sh must be sourced before lib/monitoring.sh" >&2
  exit 1
fi

# ---- Tunables / Paths (aligned with compose-generator mounts) ------------------
: "${PROMETHEUS_SCRAPE_INTERVAL:=15s}"
: "${PROMETHEUS_EVAL_INTERVAL:=15s}"
: "${PROMETHEUS_PORT:=9090}"

# Source the secret helper if available
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SECRET_HELPER="${SCRIPT_DIR}/secret-helper.sh"

# Try to get Grafana password from secrets manager first
if [[ -x "$SECRET_HELPER" ]]; then
    GRAFANA_ADMIN_PASSWORD=$("$SECRET_HELPER" get_secret grafana "admin_password" "" "") || GRAFANA_ADMIN_PASSWORD=""
fi
: "${GRAFANA_ADMIN_PASSWORD:=}"  # If still unset, will be generated in generate_monitoring_config

# Primary app metrics (default path is /metrics; override if needed)
: "${APP_METRICS_TARGET:=app:8081}"      # host:port
: "${APP_METRICS_PATH:=/metrics}"

# Optional additional targets (comma-separated "host:port" list)
: "${REDIS_METRICS_TARGET:=}"            # e.g., "redis:9121" (redis_exporter)
: "${NODE_EXPORTER_TARGETS:=}"           # e.g., "node1:9100,node2:9100"
: "${CADVISOR_TARGETS:=}"                # e.g., "cadvisor:8080"
: "${EXTRA_STATIC_TARGETS:=}"            # any extras: "svc1:1234,svc2:5678"

# Optional Splunk targets (for parity with earlier compose/orchestrator)
: "${SPLUNK_INDEXER_COUNT:=}"
: "${SPLUNK_SEARCH_HEAD_COUNT:=}"

: "${SECRETS_DIR:=./config/secrets}"     # For Grafana admin password

readonly PROMETHEUS_CONFIG_FILE="./config/prometheus.yml"
readonly PROMETHEUS_RULES_FILE="./config/alert.rules.yml"
readonly GRAFANA_PROVISION_ROOT="./config/grafana-provisioning"
readonly GRAFANA_DATASOURCE_FILE="${GRAFANA_PROVISION_ROOT}/datasources/datasource.yml"
readonly GRAFANA_DASHBOARD_PROVIDER_FILE="${GRAFANA_PROVISION_ROOT}/dashboards/provider.yml"
readonly GRAFANA_DASHBOARDS_DIR="${GRAFANA_PROVISION_ROOT}/dashboards"

# ---- Helpers -------------------------------------------------------------------
__ensure_dirs() {
  mkdir -p "./config" \
           "${GRAFANA_PROVISION_ROOT}/datasources" \
           "${GRAFANA_PROVISION_ROOT}/dashboards" \
           "${SECRETS_DIR}"
  chmod 700 "${SECRETS_DIR}"
}

__write_atomic() {
  # usage: some_producer | __write_atomic <path> <mode>
  local path="${1:?path required}" mode="${2:-644}"
  atomic_write "${path}" "${mode}"
}

__emit_targets_yaml() {
  # __emit_targets_yaml "  - job_name: 'name'" "hostA:port,hostB:port"
  local header="${1:?}" list="${2:-}"
  [[ -z "${list// }" ]] && return 0
  echo "${header}"
  echo "    static_configs:"
  IFS=',' read -r -a arr <<<"${list}"
  echo "      - targets:"
  local t
  for t in "${arr[@]}"; do
    t="$(echo "${t}" | xargs)"
    [[ -z "${t}" ]] && continue
    printf "          - '%s'\n" "${t}"
  done
}

__maybe_emit_splunk_targets() {
  # Emits Splunk idx/search-head targets if counts are set
  [[ -z "${SPLUNK_INDEXER_COUNT}" && -z "${SPLUNK_SEARCH_HEAD_COUNT}" ]] && return 0
  echo "  - job_name: 'splunk-cluster'"
  echo "    static_configs:"
  echo "      - targets:"
  local i
  if [[ -n "${SPLUNK_INDEXER_COUNT}" ]]; then
    for ((i=1; i<=SPLUNK_INDEXER_COUNT; i++)); do
      printf "          - 'splunk-idx%d:8089'\n" "$i"
    done
  fi
  if [[ -n "${SPLUNK_SEARCH_HEAD_COUNT}" ]]; then
    for ((i=1; i<=SPLUNK_SEARCH_HEAD_COUNT; i++)); do
      printf "          - 'splunk-sh%d:8089'\n" "$i"
    done
  fi
}

# ---- Generators ----------------------------------------------------------------
_generate_prometheus_yml() {
  log_debug "Generating Prometheus config: ${PROMETHEUS_CONFIG_FILE}"
  {
    cat <<EOF
# Auto-generated by monitoring.sh on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
global:
  scrape_interval: ${PROMETHEUS_SCRAPE_INTERVAL}
  evaluation_interval: ${PROMETHEUS_EVAL_INTERVAL}

rule_files:
  - "/etc/prometheus/alert.rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:${PROMETHEUS_PORT}']

  - job_name: 'app'
    metrics_path: '${APP_METRICS_PATH}'
    static_configs:
      - targets: ['${APP_METRICS_TARGET}']
EOF
    __emit_targets_yaml "  - job_name: 'redis-exporter'" "${REDIS_METRICS_TARGET}"
    __emit_targets_yaml "  - job_name: 'node-exporter'"  "${NODE_EXPORTER_TARGETS}"
    __emit_targets_yaml "  - job_name: 'cadvisor'"       "${CADVISOR_TARGETS}"
    __emit_targets_yaml "  - job_name: 'extra-static'"   "${EXTRA_STATIC_TARGETS}"
    __maybe_emit_splunk_targets
  } | __write_atomic "${PROMETHEUS_CONFIG_FILE}" "644"
}

_generate_prometheus_rules_yml() {
  log_debug "Generating Prometheus alerting rules: ${PROMETHEUS_RULES_FILE}"
  cat <<'EOF' | __write_atomic "${PROMETHEUS_RULES_FILE}" "644"
# Auto-generated by monitoring.sh
groups:
  - name: default_alerts
    rules:
      - alert: InstanceDown
        expr: up == 0
        for: 1m
        labels:
          severity: 'critical'
        annotations:
          summary: "Instance {{ $labels.instance }} down"
          description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute."
EOF
}

_generate_grafana_datasource_yml() {
  log_debug "Generating Grafana datasource: ${GRAFANA_DATASOURCE_FILE}"
  cat <<EOF | __write_atomic "${GRAFANA_DATASOURCE_FILE}" "644"
# Auto-generated by monitoring.sh
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:${PROMETHEUS_PORT}
    isDefault: true
    editable: false
EOF
}

_generate_grafana_dashboard_provider_yml() {
  log_debug "Generating Grafana dashboard provider: ${GRAFANA_DASHBOARD_PROVIDER_FILE}"
  cat <<EOF | __write_atomic "${GRAFANA_DASHBOARD_PROVIDER_FILE}" "644"
# Auto-generated by monitoring.sh
apiVersion: 1
providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    editable: true
    options:
      path: /etc/grafana/provisioning/dashboards
EOF
}

_create_placeholder_dashboard() {
  local f="${GRAFANA_DASHBOARDS_DIR}/app-overview.json"
  log_debug "Creating placeholder Grafana dashboard: ${f}"
  cat <<'EOF' | __write_atomic "${f}" "644"
{
  "annotations": { "list": [] },
  "editable": true,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "type": "text",
      "title": "My Application Dashboard",
      "gridPos": { "h": 5, "w": 24, "x": 0, "y": 0 },
      "options": {
        "content": "## Welcome\n\nThis is a placeholder dashboard. Export your own dashboard JSON and place it in the 'config/grafana-provisioning/dashboards' directory to have it automatically loaded.",
        "mode": "markdown"
      }
    }
  ],
  "refresh": "5s",
  "schemaVersion": 30,
  "style": "dark",
  "tags": [],
  "templating": { "list": [] },
  "time": { "from": "now-6h", "to": "now" },
  "timepicker": {},
  "timezone": "browser",
  "title": "App Overview",
  "uid": "placeholder-dashboard",
  "version": 1
}
EOF
}

# ---- Public API ----------------------------------------------------------------
generate_monitoring_config() {
  log_info "ðŸ“Š Generating monitoring configurations..."
  __ensure_dirs
  # Generate Grafana admin password if not set
  if [[ -z "${GRAFANA_ADMIN_PASSWORD}" ]]; then
    GRAFANA_ADMIN_PASSWORD="$(generate_random_password 32)"
    if [[ -x "$SECRET_HELPER" ]]; then
      # Store in secrets manager
      "$SECRET_HELPER" get_secret grafana "admin_password" "" "$GRAFANA_ADMIN_PASSWORD" || {
        log_warning "Failed to store Grafana password in secrets manager, falling back to file"
        write_secret_file "${SECRETS_DIR}/grafana_admin_password.txt" "${GRAFANA_ADMIN_PASSWORD}" "Grafana admin password"
      }
    else
      # Fall back to file storage
      write_secret_file "${SECRETS_DIR}/grafana_admin_password.txt" "${GRAFANA_ADMIN_PASSWORD}" "Grafana admin password"
    fi
  fi
  _generate_prometheus_yml
  _generate_prometheus_rules_yml
  _generate_grafana_datasource_yml
  _generate_grafana_dashboard_provider_yml
  _create_placeholder_dashboard
  log_warn "A placeholder dashboard was created. Drop exported JSON dashboards into '${GRAFANA_DASHBOARDS_DIR}' and restart Grafana."
  log_success "âœ… Monitoring configurations generated."
  log_info "Grafana admin password stored in ${SECRETS_DIR}/grafana_admin_password.txt"
}

# Define version
MONITORING_VERSION="1.0.0"
```