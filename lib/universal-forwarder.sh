#!/usr/bin/env bash
#
# ==============================================================================
# lib/universal-forwarder.sh
# ------------------------------------------------------------------------------
# ⭐⭐⭐
#
# Provides core functions to download and configure the Splunk Universal
# Forwarder (UF). This library supports multiple platforms by determining the
# correct download package automatically.
#
# Features:
#   - UF Download Management: Selects the correct UF package based on OS and
#     architecture and downloads it.
#   - Configuration Generation: Creates a basic 'outputs.conf' to point the
#     UF to a Splunk indexer.
#   - Multi-platform Support: Handles Linux (x86_64, arm64) and macOS.
#
# Dependencies: core.sh, error-handling.sh
# Required by:  download-uf.sh
#
# ==============================================================================

# --- Source Dependencies ---
# Assumes core libraries have been sourced by the calling script.
if [[ -z "$(type -t log_info)" || -z "$(type -t retry_command)" ]]; then
    echo "FATAL: lib/core.sh and lib/error-handling.sh must be sourced first." >&2
    exit 1
fi

# --- Configuration ---
readonly UF_VERSION="9.2.1" # The version of the Universal Forwarder to download
readonly UF_BUILD="de650d36ad46" # The build number associated with the version

# --- Private Helper Functions ---

# Determines the correct download URL for the UF based on OS and architecture.
# @stdout: The full URL for the UF package.
_get_uf_download_url() {
    local os
    local arch
    os=$(get_os)
    arch=$(uname -m)

    log_debug "Detecting UF package for OS='${os}' and Arch='${arch}'"

    case "$os" in
        "linux")
            case "$arch" in
                "x86_64")
                    echo "https://download.splunk.com/products/universalforwarder/releases/${UF_VERSION}/linux/splunkforwarder-${UF_VERSION}-${UF_BUILD}-Linux-x86_64.tgz"
                    ;;
                "aarch64"|"arm64")
                    echo "https://download.splunk.com/products/universalforwarder/releases/${UF_VERSION}/linux/splunkforwarder-${UF_VERSION}-${UF_BUILD}-Linux-arm64.tgz"
                    ;;
                *)
                    echo "" # Return empty for unsupported arch
                    ;;
            esac
            ;;
        "darwin")
             # For macOS, architecture is often handled by a universal .dmg
            echo "https://download.splunk.com/products/universalforwarder/releases/${UF_VERSION}/macos/splunkforwarder-${UF_VERSION}-${UF_BUILD}-darwin-universal2.dmg"
            ;;
        *)
            echo "" # Return empty for unsupported OS
            ;;
    esac
}


# --- Public Functions ---

# Downloads the appropriate Universal Forwarder package for the current system.
#
# Usage: download_uf_package "/path/to/destination/dir"
#
# @param1: The directory where the package will be saved.
# @stdout: The full path to the downloaded file.
download_uf_package() {
    local dest_dir="$1"
    mkdir -p "$dest_dir"

    log_info "Determining correct Universal Forwarder package to download..."
    local url
    url=$(_get_uf_download_url)

    if is_empty "$url"; then
        die "$E_GENERAL" "This platform (OS: $(get_os), Arch: $(uname -m)) is not supported for UF download."
    fi
    
    local filename
    filename=$(basename "$url")
    local dest_file="${dest_dir}/${filename}"

    if [[ -f "$dest_file" ]]; then
        log_success "Universal Forwarder package already exists: ${dest_file}"
        echo "$dest_file"
        return 0
    fi

    log_info "Downloading UF package from: ${url}"
    log_info "Destination: ${dest_file}"
    
    # Use retry_command for a more resilient download
    if ! retry_command 3 5 "curl" "-#L" "-o" "$dest_file" "$url"; then
        # Cleanup partial download on failure
        rm -f "$dest_file"
        die "$E_GENERAL" "Failed to download Universal Forwarder package."
    fi

    log_success "Download complete."
    echo "$dest_file"
}

# Generates a basic outputs.conf file to configure the UF's forwarding destination.
#
# Usage: generate_uf_outputs_config "/path/to/outputs.conf" "splunk.example.com" "9997"
#
# @param1: The full path for the output 'outputs.conf' file.
# @param2: The hostname or IP of the Splunk indexer.
# @param3: The receiving port on the Splunk indexer (e.g., 9997).
generate_uf_outputs_config() {
    local output_file="$1"
    local target_host="$2"
    local target_port="$3"

    local output_dir
    output_dir=$(dirname "$output_file")
    mkdir -p "$output_dir"

    log_info "Generating UF outputs.conf at: ${output_file}"

    cat > "$output_file" << EOF
# Auto-generated by universal-forwarder.sh on $(date)
#
# This file configures the Universal Forwarder to send data to a Splunk indexer.

[tcpout]
defaultGroup = default-autolb-group

[tcpout:default-autolb-group]
server = ${target_host}:${target_port}

[tcpout-server://${target_host}:${target_port}]
EOF

    log_success "Successfully generated ${output_file}."
}