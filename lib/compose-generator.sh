#!/usr/bin/env bash
# ==============================================================================
# lib/compose-generator.sh
# Compose file generator (modular, atomic, profile-aware)
#
# Dependencies: lib/core.sh, lib/validation.sh, lib/error-handling.sh,
#               lib/runtime-detection.sh, versions.env
# Required by : orchestrator.sh
# ==============================================================================

# ---- Dependency guard ----------------------------------------------------------
if ! command -v log_info >/dev/null 2>&1 || [[ -z "${APP_IMAGE:-}" ]]; then
  echo "FATAL: core libs and versions.env must be sourced before lib/compose-generator.sh" >&2
  exit 1
fi

: "${ENABLE_MONITORING:=false}"
: "${ENABLE_HEALTHCHECKS:=true}"

# Optional capability flags from runtime-detection (safe defaults)
: "${COMPOSE_SUPPORTS_SECRETS:=0}"
: "${COMPOSE_SUPPORTS_HEALTHCHECK:=1}"

# ==============================================================================
# YAML generators (each echoes a block)
# ==============================================================================

_generate_header() {
  cat <<'EOF'
# ------------------------------------------------------------------------------
# Auto-generated by lib/compose-generator.sh
# Do not edit this file manually; it will be overwritten.
# ------------------------------------------------------------------------------
# Compose Spec file (no `version:` key)
EOF
}

_generate_app_service() {
  cat <<EOF
services:
  # Main application service
  app:
    image: "${APP_IMAGE}"
    container_name: "my_app_main"
    restart: always
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      APP_MODE: "production"
      REDIS_HOST: "redis"
    networks:
      - app-net
    volumes:
      - app-data:/app/data
$( if is_true "${ENABLE_HEALTHCHECKS}" && (( COMPOSE_SUPPORTS_HEALTHCHECK == 1 )); then cat <<'HC'
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/health || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 8
      start_period: 10s
HC
fi )
    deploy:    # Note: deploy.resources are enforced by Swarm; some runtimes ignore them.
      resources:
        limits:
          cpus: '${APP_CPU_LIMIT:-1.5}'
          memory: '${APP_MEM_LIMIT:-2G}'
EOF
}

_generate_redis_service() {
  cat <<EOF
  # Redis caching service
  redis:
    image: "${REDIS_IMAGE}"
    container_name: "my_app_redis"
    restart: always
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    networks:
      - app-net
    volumes:
      - redis-data:/data
$( if is_true "${ENABLE_HEALTHCHECKS}" && (( COMPOSE_SUPPORTS_HEALTHCHECK == 1 )); then cat <<'HC'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 3s
      retries: 10
HC
fi )
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: '${REDIS_MEM_LIMIT:-512M}'
EOF
}

_generate_prometheus_service() {
  cat <<EOF
  # Prometheus monitoring service
  prometheus:
    image: "${PROMETHEUS_IMAGE}"
    container_name: "my_app_prometheus"
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-net
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    profiles: ["monitoring"]
$( if is_true "${ENABLE_HEALTHCHECKS}" && (( COMPOSE_SUPPORTS_HEALTHCHECK == 1 )); then cat <<'HC'
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9090/-/healthy || exit 1"]
      interval: 20s
      timeout: 3s
      retries: 10
HC
fi )
    deploy:
      resources:
        limits:
          cpus: '${PROMETHEUS_CPU_LIMIT:-1}'
          memory: '${PROMETHEUS_MEM_LIMIT:-1G}'
EOF
}

_generate_grafana_service() {
  cat <<EOF
  # Grafana dashboard service
  grafana:
    image: "${GRAFANA_IMAGE}"
    container_name: "my_app_grafana"
    restart: always
    ports:
      - "3000:3000"
    networks:
      - app-net
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana-provisioning/:/etc/grafana/provisioning/:ro
    profiles: ["monitoring"]
$( if is_true "${ENABLE_HEALTHCHECKS}" && (( COMPOSE_SUPPORTS_HEALTHCHECK == 1 )); then cat <<'HC'
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/api/health | grep -q 'database: ok'"]
      interval: 20s
      timeout: 5s
      retries: 10
HC
fi )
    deploy:
      resources:
        limits:
          cpus: '${GRAFANA_CPU_LIMIT:-0.5}'
          memory: '${GRAFANA_MEM_LIMIT:-512M}'
EOF
}

_generate_networks_block() {
  cat <<'EOF'

networks:
  app-net:
    driver: bridge
EOF
}

_generate_volumes_block() {
  cat <<'EOF'

volumes:
  app-data:
  redis-data:
  prometheus-data:
  grafana-data:
EOF
}

# ==============================================================================
# Public API
# ==============================================================================

# generate_compose_file <output_path>
generate_compose_file() {
  local out="${1:?output file required}"
  log_info "ðŸ”¥ Generating Docker Compose at: ${out}"

  # temp file; ensure cleanup on failure
  local tmp
  tmp="$(mktemp "${out}.tmp.XXXXXX")"
  register_cleanup "rm -f '${tmp}'"

  # Header
  _generate_header > "${tmp}"

  # Core services
  _generate_app_service      >> "${tmp}"
  _generate_redis_service    >> "${tmp}"

  # Monitoring (via profiles)
  if is_true "${ENABLE_MONITORING}"; then
    log_info "  -> Monitoring enabled: adding Prometheus and Grafana (profile: monitoring)"
    _generate_prometheus_service >> "${tmp}"
    _generate_grafana_service    >> "${tmp}"
  else
    log_info "  -> Monitoring disabled. You can enable at runtime with: COMPOSE_PROFILES=monitoring"
  fi

  # Top-level blocks
  _generate_networks_block >> "${tmp}"
  _generate_volumes_block  >> "${tmp}"

  # Atomic move into place
  atomic_write_file "${tmp}" "${out}"
  log_success "âœ… Compose file generated: ${out}"
}

# ==============================================================================
# End of lib/compose-generator.sh
# ==============================================================================
