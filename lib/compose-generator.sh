#!/usr/bin/env bash
#
# ==============================================================================
# lib/compose-generator.sh
# ------------------------------------------------------------------------------
# ⭐⭐⭐⭐⭐
#
# Generates the docker-compose.yml file dynamically based on configuration.
# This script uses a modular design, with a dedicated function for each service,
# allowing for easy extension and conditional inclusion of components.
#
# Features:
#   - Modular: Each service, network, and volume is a separate function.
#   - Configurable: Reads environment variables for ports, limits, and images.
#   - Resource Optimization: Defines CPU and memory limits for services.
#
# Dependencies: core.sh, validation.sh, runtime-detection.sh, versions.env
# Required by:  orchestrator.sh
#
# ==============================================================================

# --- Source Dependencies ---
# Assumes core libraries and versions.env have been sourced by the orchestrator.
if [[ -z "$(type -t log_info)" || -z "${APP_IMAGE:-}" ]]; then
    echo "FATAL: Core libraries and versions.env must be sourced before lib/compose-generator.sh" >&2
    exit 1
fi

# --- Service-Specific Generators ---
# Each function is responsible for generating the YAML for a single service.
# They use 'cat << EOF' (here-documents) to preserve YAML indentation.

_generate_app_service() {
    cat << EOF
  # Main application service
  app:
    image: "${APP_IMAGE}"
    container_name: "my_app_main"
    restart: always
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      - "APP_MODE=production"
      - "REDIS_HOST=redis"
    networks:
      - app-net
    volumes:
      - "app-data:/app/data"
    deploy:
      resources:
        limits:
          cpus: '${APP_CPU_LIMIT:-1.5}'
          memory: '${APP_MEM_LIMIT:-2G}'
EOF
}

_generate_redis_service() {
    cat << EOF
  # Redis caching service
  redis:
    image: "${REDIS_IMAGE}"
    container_name: "my_app_redis"
    restart: always
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - app-net
    volumes:
      - "redis-data:/data"
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: '${REDIS_MEM_LIMIT:-512M}'
EOF
}

_generate_prometheus_service() {
    cat << EOF
  # Prometheus monitoring service
  prometheus:
    image: "${PROMETHEUS_IMAGE}"
    container_name: "my_app_prometheus"
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-net
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - "prometheus-data:/prometheus"
    deploy:
      resources:
        limits:
          cpus: '${PROMETHEUS_CPU_LIMIT:-1}'
          memory: '${PROMETHEUS_MEM_LIMIT:-1G}'
EOF
}

_generate_grafana_service() {
    cat << EOF
  # Grafana dashboard service
  grafana:
    image: "${GRAFANA_IMAGE}"
    container_name: "my_app_grafana"
    restart: always
    ports:
      - "3000:3000"
    networks:
      - app-net
    volumes:
      - "grafana-data:/var/lib/grafana"
      - "./config/grafana-provisioning/:/etc/grafana/provisioning/:ro"
    deploy:
      resources:
        limits:
          cpus: '${GRAFANA_CPU_LIMIT:-0.5}'
          memory: '${GRAFANA_MEM_LIMIT:-512M}'
EOF
}

# --- Top-Level Block Generators ---

_generate_networks_block() {
    cat << EOF

networks:
  app-net:
    driver: bridge
EOF
}

_generate_volumes_block() {
    cat << EOF

volumes:
  app-data:
  redis-data:
  prometheus-data:
  grafana-data:
EOF
}


# --- Main Public Function ---

# Orchestrates the generation of the entire docker-compose.yml file.
# It pieces together the modular blocks into a final file.
#
# Usage: generate_compose_file "path/to/docker-compose.yml"
generate_compose_file() {
    local output_file="$1"

    log_info "🔥 Generating Docker Compose file at: ${output_file}"

    # Start with a fresh file and add the header
    cat > "$output_file" << EOF
# Auto-generated by compose-generator.sh on $(date)
# Do not edit this file manually.
version: '3.8'

services:
EOF

    # Add core services
    log_info "  -> Adding core services (app, redis)..."
    echo "$(_generate_app_service)" >> "$output_file"
    echo "$(_generate_redis_service)" >> "$output_file"

    # Conditionally add monitoring stack
    if is_true "${ENABLE_MONITORING:-false}"; then
        log_info "  -> Monitoring is enabled. Adding Prometheus and Grafana..."
        echo "$(_generate_prometheus_service)" >> "$output_file"
        echo "$(_generate_grafana_service)" >> "$output_file"
    else
        log_info "  -> Monitoring is disabled. Skipping."
    fi

    # Add top-level blocks
    log_info "  -> Adding network and volume definitions..."
    echo "$(_generate_networks_block)" >> "$output_file"
    echo "$(_generate_volumes_block)" >> "$output_file"

    log_success "✅ Docker Compose file generated successfully."
}