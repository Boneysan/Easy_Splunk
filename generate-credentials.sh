#!/usr/bin/env bash
#
# ==============================================================================
# generate-credentials.sh
# ------------------------------------------------------------------------------
# ⭐⭐⭐
#
# A utility script to generate all necessary credentials, secrets, and TLS
# certificates for the application stack. It acts as a convenient wrapper
# around the functions provided in lib/security.sh.
#
# Features:
#   - Generates multiple credentials (admin password, DB password, etc.).
#   - Manages certificate creation for specified domains.
#   - Saves secrets to a .env file for easy use with Docker Compose.
#   - Performs security validation by checking file existence and permissions.
#
# Dependencies: lib/security.sh (and its core dependencies)
# Required by:  orchestrator.sh (or run manually by an administrator)
#
# ==============================================================================

# --- Strict Mode & Setup ---
set -euo pipefail

# --- Source Dependencies ---
# Make the script runnable from any location by resolving its directory.
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
source "${SCRIPT_DIR}/lib/core.sh"
source "${SCRIPT_DIR}/lib/error-handling.sh"
source "${SCRIPT_DIR}/lib/security.sh"

# --- Configuration ---
# Define standard locations for generated credentials.
readonly SECRETS_DIR="./config/secrets"
readonly CERTS_DIR="./config/certs"
readonly SECRETS_ENV_FILE="${SECRETS_DIR}/production.env"

# Define domains for which TLS certificates are needed.
readonly APP_DOMAIN="localhost"

# --- Helper Functions ---

# Prompts the user for confirmation before proceeding with a potentially
# destructive or sensitive action.
confirm_or_exit() {
    while true; do
        read -r -p "$1 [y/N] " response
        case "$response" in
            [yY][eE][sS]|[yY]) return 0 ;;
            [nN][oO]|[nN]|"") die 0 "Operation cancelled by user." ;;
            *) log_warn "Invalid input. Please answer 'y' or 'n'." ;;
        esac
    done
}

# --- Main Generation Function ---

main() {
    log_info "🚀 Starting credential generation process..."
    log_warn "This will create new secrets and certificates."
    log_warn "Existing certificate files will NOT be overwritten, but the secrets file will be."
    confirm_or_exit "Do you want to continue?"

    # 1. Create Directories
    log_info "Ensuring configuration directories exist..."
    mkdir -p "$SECRETS_DIR"
    mkdir -p "$CERTS_DIR"
    log_info "  -> ${SECRETS_DIR}"
    log_info "  -> ${CERTS_DIR}"

    # 2. Generate SSL/TLS Certificates (using lib/security.sh)
    log_info "Generating self-signed TLS certificates as needed..."
    generate_self_signed_cert \
        "$APP_DOMAIN" \
        "${CERTS_DIR}/app.key" \
        "${CERTS_DIR}/app.crt"

    # 3. Generate Passwords and Secrets (using lib/security.sh)
    log_info "Generating random passwords and API keys..."
    local admin_password
    local db_password
    local api_key
    admin_password=$(generate_random_password 32)
    db_password=$(generate_random_password 32)
    api_key=$(generate_random_password 64)
    log_success "New credentials have been generated in memory."

    # 4. Store Credentials to .env file
    log_info "Saving credentials to: ${SECRETS_ENV_FILE}"
    # Use a here-document to write the .env file
    cat > "$SECRETS_ENV_FILE" << EOF
# ==========================================================
# Auto-generated by generate-credentials.sh on $(date)
# This file contains sensitive information.
# DO NOT COMMIT THIS FILE TO VERSION CONTROL.
# ==========================================================

# Application Admin Credentials
ADMIN_USER="admin"
ADMIN_PASSWORD="${admin_password}"

# Internal Database Credentials
DB_USER="app_user"
DB_PASSWORD="${db_password}"

# External Service API Key
THIRD_PARTY_API_KEY="${api_key}"
EOF

    # 5. Security Hardening (using lib/security.sh)
    log_info "Applying secure file permissions..."
    # The cert function already hardens the certs, so we only need to do the .env file.
    harden_file_permissions "$SECRETS_ENV_FILE" "600"
    log_info "Permissions set to '600' for ${SECRETS_ENV_FILE}"

    # 6. Security Validation
    log_info "Validating generated credential files..."
    if [[ ! -f "$SECRETS_ENV_FILE" || ! -f "${CERTS_DIR}/app.key" || ! -f "${CERTS_DIR}/app.crt" ]]; then
        die "$E_GENERAL" "Validation failed! One or more credential files were not created."
    fi
    log_success "  ✔️ All required credential files exist."

    log_success "✅ Credential generation complete!"
    log_info "Secrets are stored in ${SECRETS_ENV_FILE}"
    log_info "Certificates are stored in ${CERTS_DIR}"
}

# --- Script Execution ---
main "$@"