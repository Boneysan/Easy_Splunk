#
# ==============================================================================
# versions.env
# ------------------------------------------------------------------------------
# ⭐⭐⭐⭐
#
# Centralized version management for all components, services, and container
# images used in the project. This file defines version tags and, more
# importantly, immutable SHA256 digests to ensure build reproducibility.
#
# This file is intended to be 'sourced' by other scripts.
#
# Dependencies: None
# Required by:  All image operations
#
# ==============================================================================

# --- Application Services ---
# Define the versions for your main application components.
readonly APP_VERSION="3.5.1"
readonly APP_IMAGE_REPO="my-org/my-app"
readonly APP_IMAGE_DIGEST="sha256:a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2"
readonly APP_IMAGE="${APP_IMAGE_REPO}@${APP_IMAGE_DIGEST}"


# --- Monitoring Stack ---
# Versions for Prometheus, Grafana, and other observability tools.
readonly PROMETHEUS_VERSION="v2.53.0"
readonly PROMETHEUS_IMAGE_REPO="prom/prometheus"
readonly PROMETHEUS_IMAGE_DIGEST="sha256:d1f6998b7e054529b532e3a6c1a8563a948e589467610144933550474b3ba145"
readonly PROMETHEUS_IMAGE="${PROMETHEUS_IMAGE_REPO}@${PROMETHEUS_IMAGE_DIGEST}"

readonly GRAFANA_VERSION="11.1.0"
readonly GRAFANA_IMAGE_REPO="grafana/grafana"
readonly GRAFANA_IMAGE_DIGEST="sha256:82b9442a843519782539420556201a99542a27898516142a2ea329d45a909477"
readonly GRAFANA_IMAGE="${GRAFANA_IMAGE_REPO}@${GRAFANA_IMAGE_DIGEST}"


# --- Infrastructure & Utilities ---
# Versions for databases, caches, or other backing services.
readonly REDIS_VERSION="7.2.5"
readonly REDIS_IMAGE_REPO="redis"
readonly REDIS_IMAGE_DIGEST="sha256:d89a2a5439e6a992455b987c0e5a6b834277b068f868d51624c11b157a44f329"
readonly REDIS_IMAGE="${REDIS_IMAGE_REPO}@${REDIS_IMAGE_DIGEST}"


# --- Version Validation Functions ---
# These functions can be used by other scripts to check version string formats.

# Validates that a version string follows a simple Major.Minor.Patch format.
# Does not support pre-release tags like -rc1, -beta, etc.
# Usage: if validate_version_format "1.2.3"; then ...
#
# Returns 0 on success, 1 on failure.
validate_version_format() {
    local version="$1"
    local semver_regex="^[0-9]+\.[0-9]+\.[0-9]+$"

    if [[ "$version" =~ $semver_regex ]]; then
        return 0 # Success
    else
        # In a real script, you might use log_error from core.sh here.
        echo "Error: Version '$version' is not a valid Major.Minor.Patch format." >&2
        return 1 # Failure
    fi
}

# Validates that a string is a valid SHA256 digest.
# Usage: if is_valid_digest "sha256:a1b2..."; then ...
#
# Returns 0 on success, 1 on failure.
is_valid_digest() {
    local digest="$1"
    local digest_regex="^sha256:[a-f0-9]{64}$"

    if [[ "$digest" =~ $digest_regex ]]; then
        return 0 # Success
    else
        echo "Error: Digest '$digest' is not a valid sha256 digest format." >&2
        return 1 # Failure
    fi
}

# This export statement makes the functions available to scripts that source this file.
export -f validate_version_format
export -f is_valid_digest